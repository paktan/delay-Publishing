{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["proxyurl","Input","Search","TextArea","Typography","Title","Paragraph","Text","Layout","Header","Footer","Sider","Content","App","useState","okMallProductText","setOkMallProductText","naverSearchProductCodes","setNaverSearchProductCodes","okProductInfos","setokProductInfos","naverProductInfos","setNaverProductInfos","progress","setProgress","finds","Array","index","findsCount","naverProdcuts","okPoducts","callFetch","text","a","async","fetch","encodeURI","headers","then","data","status","console","log","toString","JSON","stringify","json","item","product","code","name","count","total","link","push","getFetch","length","getOkMallFetch","response","map","splice","className","href","rel","src","alt","strokeLinecap","percent","type","id","onKeyUp","e","keyCode","value","onChange","target","placeholder","aria-label","aria-describedby","onClick","event","header","footer","bordered","dataSource","renderItem","Item","split","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e075f13.chunk.js","sourcesContent":["import React, {useState, ChangeEvent} from 'react'\nimport {Button, Input, Typography, List, Progress, Tag, Layout} from 'antd'\nimport logo from './logo.svg'\nimport './App.css';\n\nconst { Search, TextArea } = Input;\nconst { Title, Paragraph, Text } = Typography;\nconst { Header, Footer, Sider, Content } = Layout;\n\nconst apiCode = 'BHdesj3dRp0zu9ud9aaUPSs/QZ0ZewaUtjpZLqTMY2elfY5cKRICZQ=='\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst domain = 'https://openapi.naver.com/v1/search/shop.json?display=100&start=1&sort=sim&query='\nconst okMallApi = 'https://delay-shop-api.azurewebsites.net/api/v1/okmall'\n\ninterface prodcutInfo {\n  code: string,\n  name: string,\n  count: number,\n  link: string\n}\n\nconst App: React.FC = () => {\n\n  const [okMallProductText, setOkMallProductText] = useState('')\n  const [naverSearchProductCodes, setNaverSearchProductCodes] = useState('')\n\n  const [okProductInfos, setokProductInfos] = useState<Array<prodcutInfo>>()\n  const [naverProductInfos, setNaverProductInfos] = useState<Array<prodcutInfo>>()\n\n  \n  \n  const [progress, setProgress] = useState<number>(0)\n  \n\n  let finds:Array<string> = new Array()\n  let index = 0\n  let findsCount = 0\n  let naverProdcuts: Array<prodcutInfo> = new Array() \n  let okPoducts: Array<prodcutInfo> = new Array()\n  \n  const callFetch = async (text:string) => {\n    if(text != \"jyp\"){\n      fetch(proxyurl + domain + encodeURI(text), {\n        headers: {'X-Naver-Client-Id':'mnUoJCdcr7xsozFA0gRJ', 'X-Naver-Client-Secret': 'zAkagcFUfG'}\n      }).\n      then(data => {\n        if(data.status != 200){\n          console.log(\"error: \"+data.status.toString() + \" | \" + JSON.stringify(data))\n        }\n        return data.json()}).\n      then(item => {\n        const product:prodcutInfo = {\n          code:text,\n          name:\"\",\n          count:item.total,\n          link:\"\"\n        }\n        naverProdcuts.push(product)\n        index++\n        setProgress(100*index/findsCount)\n        if(index < findsCount) {\n          callFetch(finds[index])\n        } else {\n          setNaverProductInfos(naverProdcuts)\n        }\n      })\n    } else {\n      const product:prodcutInfo = {\n        code:\"백지연 힘내라\",\n        name:\"사랑의 불시착\",\n        count:0,\n        link:\"\"\n      }\n      naverProdcuts.push(product)\n      index++\n      setProgress(100*index/findsCount)\n      if(index < findsCount) {\n        callFetch(finds[index])\n      } else {\n        setNaverProductInfos(naverProdcuts)\n      }\n    }\n    \n  }\n\n  const getFetch = async () => {\n    findsCount = finds.length\n    callFetch(finds[index]).then()\n\n    // finds.map( code => {\n      // const item = callFetch(finds[0])\n      // item.then( item => prodcuts.push(item))\n    // })\n    // setItems(prodcuts)\n  }\n\n  const okMallProductNameInputChange = (e:ChangeEvent<HTMLInputElement>) => {\n    setOkMallProductText(e.target.value)\n  }\n\n  const naverSearchProductCodeInputChange = (e:ChangeEvent<HTMLInputElement>) => {\n    setNaverSearchProductCodes(e.target.value)\n  } \n\n  const getOkMallFetch = async (text:string) => {\n    if(text.length <= 0)  return\n    setNaverSearchProductCodes('')\n    try {\n      const response = await fetch(proxyurl+okMallApi+\"?keyword=\"+encodeURI(text)+'&code='+apiCode);\n      const json = await response.json();\n      finds = []\n      json.map((item:prodcutInfo) => {\n        const product:prodcutInfo = {\n          code:(item.code.length > 0 ? item.code : \"jyp\"),\n          name:(item.name.length > 0 ? item.name : \"jyp\"),\n          count:0,\n          link:item.link\n        }\n        okPoducts.push(product)\n        finds.push(product.code)  \n      })\n      setokProductInfos(okPoducts)\n\n      if(finds.length <= 0)  return\n      index = 0\n      setProgress(index)\n      naverProdcuts.splice(0,naverProdcuts.length)\n      getFetch()\n    } catch (err) {\n        return console.log(err)\n    }\n  }\n  \n  const okSearchBtnClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n      getOkMallFetch(okMallProductText)\n  }\n\n  const naverSearchCodeBtnClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if(naverSearchProductCodes.length <= 0)  return\n    index = 0\n    setProgress(index)\n    naverProdcuts.splice(0,naverProdcuts.length)\n    finds = naverSearchProductCodes.split(',')\n    getFetch()\n  }\n\n  const onOkEnterKey = (e:React.KeyboardEvent<HTMLInputElement>) => {\n    if(e.keyCode==13) {\n      getOkMallFetch(okMallProductText)\n    }\n  }\n\n  const onNaverEnterKey = (e:React.KeyboardEvent<HTMLInputElement>) => {\n    if(e.keyCode==13) {\n      if(naverSearchProductCodes.length <= 0)  return\n      index = 0\n      setProgress(index)\n      naverProdcuts.splice(0,naverProdcuts.length)\n      finds = naverSearchProductCodes.split(',')\n      getFetch()\n    }\n  }\n//   return(\n//     <div className=\"App\">\n//       <Layout>\n//       <Header>Header</Header>\n//       <Content>Content</Content>\n//       <Footer>Footer</Footer>\n//     </Layout>\n\n//     </div>\n//   )\n// }\n// export default App;\n\n  return (\n    <div className=\"App\">\n      <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\"></link>\n      <header className=\"App-header\">\n        <img src='https://shop-phinf.pstatic.net/20190702_17/ncp_1nq2uj_01_1562054355047mnXo4_JPEG/5010845439258749_-647527624.jpg' className=\"App-logo\" alt=\"logo\" />\n      </header>\n        <div><Progress strokeLinecap=\"square\" percent={progress} /></div>\n        <div className=\"d-flex justify-content-between\">\n          <div className=\"p-2 flex-fill bd-highlight\"> \n            <div className=\"d-flex justify-content-center\">\n              <div className=\"p-2 bd-highlight\"> \n                <div className=\"p-3 mb-2 text-dark\">Ok Mall</div>\n              </div>\n            </div>\n            <div className=\"input-group mb-3\">\n              <input type=\"text\" \n                className=\"form-control\" \n                id=\"okProductNameInput\" \n                onKeyUp={onOkEnterKey}\n                value={okMallProductText}\n                onChange={okMallProductNameInputChange}\n                placeholder=\"상품명\" \n                aria-label=\"okmall prodcuct name\" \n                aria-describedby=\"okSearchBtn\"/>\n              <div className=\"input-group-append\">\n                <button className=\"btn btn-outline-dark\" type=\"button\" id=\"okSearchBtn\" onClick={okSearchBtnClick}>\n                  Search\n                </button>\n              </div>\n            </div>\n            <div className=\"d-flex justify-content-center\">\n              <div className=\"p-2 bd-highlight\"> \n                <List\n                  header={<div>상품명</div>}\n                  footer={<div></div>}\n                  bordered\n                  dataSource={okProductInfos}\n                  renderItem={item => (\n                    <List.Item>\n                      {item.name}\n                    </List.Item>\n                  )}\n                />\n              </div>\n              <div className=\"p-2 bd-highlight\">\n                <List\n                  header={<div>코드</div>}\n                  footer={<div></div>}\n                  bordered\n                  dataSource={okProductInfos}\n                  renderItem={item => (\n                    <List.Item>\n                      {item.code}\n                    </List.Item>\n                  )}\n                />\n              </div>\n              <div className=\"p-2 bd-highlight\"> \n                <List\n                  header={<div>링크</div>}\n                  footer={<div></div>}\n                  bordered\n                  dataSource={okProductInfos}\n                  renderItem={item => (\n                    <List.Item>\n                      <a href={item.link} target=\"_blank\" className=\"text-primary\">{item.link}</a>\n                    </List.Item>\n                  )}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"p-2 flex-fill bd-highlight\">\n            <div className=\"d-flex justify-content-center\">\n              <div className=\"p-2 bd-highlight\"> \n                <div className=\"p-3 mb-2 text-dark\">Naver Search</div>\n              </div>\n            </div>\n            <div className=\"input-group mb-3\">\n              <input type=\"text\" \n                className=\"form-control\" \n                id=\"naverSearchProdcutCodeInput\" \n                value={naverSearchProductCodes}\n                onKeyUp={onNaverEnterKey}\n                onChange={naverSearchProductCodeInputChange}\n                placeholder=\"상품코드\" \n                aria-label=\"naver serarch prodcuct code\" \n                aria-describedby=\"naverSearchProdcutCodeBtn\"/>\n              <div className=\"input-group-append\">\n                <button className=\"btn btn-outline-dark\" type=\"button\" id=\"naverSearchProdcutCodeBtn\" onClick={naverSearchCodeBtnClick}>\n                  Search\n                </button>\n              </div>\n            </div>\n            <div className=\"d-flex justify-content-center\">\n              <div className=\"p-2 bd-highlight\"> \n                <List\n                  header={<div>상품코드</div>}\n                  footer={<div></div>}\n                  bordered\n                  dataSource={naverProductInfos}\n                  renderItem={item => (\n                    <List.Item>\n                      {item.code}\n                    </List.Item>\n                  )}\n                />\n              </div>\n              <div className=\"p-2 bd-highlight\"> \n                <List\n                  header={<div>검색개수</div>}\n                  footer={<div></div>}\n                  bordered\n                  dataSource={naverProductInfos}\n                  renderItem={item => (\n                    <List.Item>\n                      {item.count}\n                    </List.Item>\n                  )}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}