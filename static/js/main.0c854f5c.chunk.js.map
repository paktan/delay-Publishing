{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Search","Input","App","TextArea","Typography","Title","Paragraph","Text","useState","items","setItems","progress","setProgress","finds","Array","index","findsCount","prodcuts","callFetch","text","a","async","fetch","proxyurl","encodeURI","headers","then","data","status","alert","toString","JSON","stringify","json","item","product","code","count","total","push","className","src","alt","placeholder","enterButton","size","allowClear","onSearch","value","length","splice","split","strokeLinecap","percent","header","footer","bordered","dataSource","renderItem","Item","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mTAKQA,G,OAAqBC,IAArBD,QAgGOE,GAhGcD,IAAbE,SACmBC,IAA3BC,MAA2BD,IAApBE,UAAoBF,IAATG,KAUJ,WAAO,IAAD,EAEEC,mBAAS,IAFX,gCAGAA,sBAHA,mBAGnBC,EAHmB,KAGZC,EAHY,OAIMF,mBAAiB,GAJvB,mBAInBG,EAJmB,KAITC,EAJS,OAKoBJ,mBAAiB,IALrC,mBAOtBK,GAPsB,UAOA,IAAIC,OAC1BC,EAAQ,EACRC,EAAa,EACbC,EAA+B,IAAIH,MAEjCI,EAAY,SAAZA,EAAmBC,GAAP,SAAAC,EAAAC,OAAA,gDAChBC,MAAMC,wHAAoBC,UAAUL,GAAO,CACzCM,QAAS,CAAC,oBAAoB,uBAAwB,wBAAyB,gBAEjFC,MAAK,SAAAC,GAIH,OAHkB,KAAfA,EAAKC,QACNC,MAAM,UAAUF,EAAKC,OAAOE,WAAa,MAAQC,KAAKC,UAAUL,IAE3DA,EAAKM,UACdP,MAAK,SAAAQ,GACH,IAAMC,EAAsB,CAC1BC,KAAKjB,EACLkB,MAAMH,EAAKI,OAEbrB,EAASsB,KAAKJ,GACdpB,IACAH,EAAY,IAAIG,EAAMC,GACnBD,EAAQC,EACTE,EAAUL,EAAME,IAEhBL,EAASO,MApBG,sCA2ClB,OACE,yBAAKuB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAI,oHAAoHD,UAAU,WAAWE,IAAI,UAExJ,8BACE,6BACA,6BACA,kBAAC1C,EAAD,CAAQ2C,YAAY,oBAAoBC,YAAY,SAASC,KAAK,QAAQC,YAAY,EAAMC,SAAU,SAAAC,GAzB3F,IAAO7B,IAyBuG6B,EAzB9G,EAAA5B,EAAAC,OAAA,qDAEZF,EAAK8B,QAAU,GAFH,iDAIfrC,EADAG,EAAQ,GAERE,EAASiC,OAAO,EAAEjC,EAASgC,QAC3BpC,EAAQM,EAAKgC,MAAM,KACnBnC,EAAaH,EAAMoC,OACnB/B,EAAUL,EAAME,IAAQW,OART,wCA0BX,6BACA,6BACA,6BAAK,kBAAC,IAAD,CAAU0B,cAAc,SAASC,QAAS1C,KAC/C,kBAAC,IAAD,CACF2C,OAAQ,8BACRC,OAAQ,8BACRC,UAAQ,EACRC,WAAYhD,EACZiD,WAAY,SAAAxB,GAAI,OACd,kBAAC,IAAKyB,KAAN,KACGzB,EAAKG,cC9EIuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,kB","file":"static/js/main.0c854f5c.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport {Button, Input, Typography, List, Progress, Tag} from 'antd'\nimport logo from './logo.svg'\nimport './App.css';\n\nconst { Search, TextArea } = Input;\nconst { Title, Paragraph, Text } = Typography;\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst domain = 'https://openapi.naver.com/v1/search/shop.json?display=100&start=1&sort=sim&query='\n\ninterface prodcutInfo {\n  code: string,\n  count: number\n}\n\nconst App: React.FC = () => {\n\n  const [result, setResult] = useState('')\n  const [items, setItems] = useState<Array<prodcutInfo>>()\n  const [progress, setProgress] = useState<number>(0)\n  const [defaultInputVal, setDefaultInputVal] = useState<String>('')\n\n  let finds:Array<string> = new Array()\n  let index = 0\n  let findsCount = 0\n  let prodcuts: Array<prodcutInfo> = new Array() \n  \n  const callFetch = async (text:string) => {\n    fetch(proxyurl + domain + encodeURI(text), {\n      headers: {'X-Naver-Client-Id':'mnUoJCdcr7xsozFA0gRJ', 'X-Naver-Client-Secret': 'zAkagcFUfG'}\n    }).\n    then(data => {\n      if(data.status != 200){\n        alert(\"error: \"+data.status.toString() + \" | \" + JSON.stringify(data))\n      }\n      return data.json()}).\n    then(item => {\n      const product:prodcutInfo = {\n        code:text,\n        count:item.total\n      }\n      prodcuts.push(product)\n      index++\n      setProgress(100*index/findsCount)\n      if(index < findsCount) {\n        callFetch(finds[index])\n      } else {\n        setItems(prodcuts)\n      }\n    })\n    \n  }\n\n  const getFetch = async (text:string) => {\n\n    if(text.length <= 0)  return\n    index = 0\n    setProgress(index)\n    prodcuts.splice(0,prodcuts.length)\n    finds = text.split(',')\n    findsCount = finds.length\n    callFetch(finds[index]).then()\n\n    // finds.map( code => {\n      // const item = callFetch(finds[0])\n      // item.then( item => prodcuts.push(item))\n    // })\n    // setItems(prodcuts)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src='https://shop-phinf.pstatic.net/20190702_17/ncp_1nq2uj_01_1562054355047mnXo4_JPEG/50108458439258749_-647527624.jpg' className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <body>\n        <br></br>\n        <br></br>\n        <Search placeholder=\"input search text\" enterButton=\"Search\" size=\"large\" allowClear={true} onSearch={value => {getFetch(value)}}/>\n        <br></br>\n        <br></br>\n        <div><Progress strokeLinecap=\"square\" percent={progress} /></div>\n        <List\n      header={<div></div>}\n      footer={<div></div>}\n      bordered\n      dataSource={items}\n      renderItem={item => (\n        <List.Item>\n          {item.count}\n        </List.Item>\n      )}\n    />\n      </body>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}